// Generated by IcedCoffeeScript 1.8.0-e
(function() {
  var colorize, diff, fs, iced, tty, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  tty = require('tty');

  diff = require('./index').diff;

  colorize = require('./colorize').colorize;

  module.exports = function(argv) {
    var data1, data2, err1, err2, json1, json2, options, result, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    options = require('dreamopt')(["Usage: json-diff [-vjCk] first.json second.json", "Arguments:", "  first.json              Old file #var(file1) #required", "  second.json             New file #var(file2) #required", "General options:", "  -v, --verbose           Output progress info", "  -C, --[no-]color        Colored output", "  -j, --raw-json          Display raw JSON encoding of the diff #var(raw)", "  -k, --keys-only         Compare only the keys, ignore the differences in values #var(keysOnly)"], argv);
    if (options.verbose) {
      process.stderr.write("" + (JSON.stringify(options, null, 2)) + "\n");
    }
    if (options.verbose) {
      process.stderr.write("Loading files...\n");
    }
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/andreyvit/dev/mini/json-diff/lib/cli.iced",
          funcname: "exports"
        });
        fs.readFile(options.file1, 'utf8', __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err1 = arguments[0];
              return data1 = arguments[1];
            };
          })(),
          lineno: 25
        }));
        fs.readFile(options.file2, 'utf8', __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err2 = arguments[0];
              return data2 = arguments[1];
            };
          })(),
          lineno: 26
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err1) {
          throw err1;
        }
        if (err2) {
          throw err2;
        }
        if (options.verbose) {
          process.stderr.write("Parsing old file...\n");
        }
        json1 = JSON.parse(data1);
        if (options.verbose) {
          process.stderr.write("Parsing new file...\n");
        }
        json2 = JSON.parse(data2);
        if (options.verbose) {
          process.stderr.write("Running diff...\n");
        }
        result = diff(json1, json2, options);
        if (options.color == null) {
          options.color = tty.isatty(process.stdout.fd);
        }
        if (result) {
          if (options.raw) {
            if (options.verbose) {
              process.stderr.write("Serializing JSON output...\n");
            }
            process.stdout.write(JSON.stringify(result, null, 2));
          } else {
            if (options.verbose) {
              process.stderr.write("Producing colored output...\n");
            }
            process.stdout.write(colorize(result, {
              color: options.color
            }));
          }
        } else {
          if (options.verbose) {
            process.stderr.write("No diff");
          }
        }
        if (result) {
          return process.exit(1);
        }
      };
    })(this));
  };

}).call(this);
